openapi: 3.0.3
info:
  title: LaunchDate API
  description: API for managing product launches, milestones, and tasks
  version: 1.0.0
  contact:
    name: LaunchDate Team
    url: https://github.com/vamosdalian/launchdate-backend

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.launch-date.com
    description: Production server

tags:
  - name: health
    description: Health check endpoints
  - name: launches
    description: Launch management
  - name: milestones
    description: Milestone management
  - name: tasks
    description: Task management

paths:
  /health:
    get:
      summary: Health check
      description: Check the health status of the API and its dependencies
      tags:
        - health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is degraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/v1/launches:
    get:
      summary: List launches
      description: Retrieve a list of launches with optional filters
      tags:
        - launches
      parameters:
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [draft, planned, in-progress, launched, cancelled]
        - name: priority
          in: query
          description: Filter by priority
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: team_id
          in: query
          description: Filter by team ID
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of launches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Launch'

    post:
      summary: Create a launch
      description: Create a new launch
      tags:
        - launches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLaunchRequest'
      responses:
        '201':
          description: Launch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Launch'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/launches/{id}:
    get:
      summary: Get a launch
      description: Retrieve a launch by ID
      tags:
        - launches
      parameters:
        - name: id
          in: path
          required: true
          description: Launch ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Launch details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Launch'
        '404':
          description: Launch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a launch
      description: Update an existing launch
      tags:
        - launches
      parameters:
        - name: id
          in: path
          required: true
          description: Launch ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLaunchRequest'
      responses:
        '200':
          description: Launch updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Launch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a launch
      description: Soft delete a launch
      tags:
        - launches
      parameters:
        - name: id
          in: path
          required: true
          description: Launch ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Launch deleted successfully
        '404':
          description: Launch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/launches/{launch_id}/milestones:
    get:
      summary: List milestones for a launch
      description: Retrieve all milestones associated with a launch
      tags:
        - milestones
      parameters:
        - name: launch_id
          in: path
          required: true
          description: Launch ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of milestones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Milestone'

  /api/v1/milestones:
    post:
      summary: Create a milestone
      description: Create a new milestone for a launch
      tags:
        - milestones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMilestoneRequest'
      responses:
        '201':
          description: Milestone created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/milestones/{id}:
    get:
      summary: Get a milestone
      description: Retrieve a milestone by ID
      tags:
        - milestones
      parameters:
        - name: id
          in: path
          required: true
          description: Milestone ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Milestone details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
        '404':
          description: Milestone not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a milestone
      description: Update an existing milestone
      tags:
        - milestones
      parameters:
        - name: id
          in: path
          required: true
          description: Milestone ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMilestoneRequest'
      responses:
        '200':
          description: Milestone updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Milestone not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a milestone
      description: Soft delete a milestone
      tags:
        - milestones
      parameters:
        - name: id
          in: path
          required: true
          description: Milestone ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Milestone deleted successfully
        '404':
          description: Milestone not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/launches/{launch_id}/tasks:
    get:
      summary: List tasks for a launch
      description: Retrieve all tasks associated with a launch
      tags:
        - tasks
      parameters:
        - name: launch_id
          in: path
          required: true
          description: Launch ID
          schema:
            type: integer
            format: int64
        - name: milestone_id
          in: query
          description: Filter by milestone ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /api/v1/tasks:
    post:
      summary: Create a task
      description: Create a new task for a launch
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/tasks/{id}:
    get:
      summary: Get a task
      description: Retrieve a task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a task
      description: Update an existing task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a task
      description: Soft delete a task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, degraded]
        database:
          type: string
          enum: [ok, error]
        redis:
          type: string
          enum: [ok, error]

    Launch:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        launch_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [draft, planned, in-progress, launched, cancelled]
        priority:
          type: string
          enum: [low, medium, high, critical]
        owner_id:
          type: integer
          format: int64
        team_id:
          type: integer
          format: int64
          nullable: true
        image_url:
          type: string
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateLaunchRequest:
      type: object
      required:
        - title
        - launch_date
      properties:
        title:
          type: string
        description:
          type: string
        launch_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [draft, planned, in-progress, launched, cancelled]
        priority:
          type: string
          enum: [low, medium, high, critical]
        team_id:
          type: integer
          format: int64
          nullable: true
        image_url:
          type: string
        tags:
          type: array
          items:
            type: string

    UpdateLaunchRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        launch_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [draft, planned, in-progress, launched, cancelled]
        priority:
          type: string
          enum: [low, medium, high, critical]
        team_id:
          type: integer
          format: int64
          nullable: true
        image_url:
          type: string
        tags:
          type: array
          items:
            type: string

    Milestone:
      type: object
      properties:
        id:
          type: integer
          format: int64
        launch_id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, in-progress, completed, blocked]
        order:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateMilestoneRequest:
      type: object
      required:
        - launch_id
        - title
        - due_date
      properties:
        launch_id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, in-progress, completed, blocked]
        order:
          type: integer

    UpdateMilestoneRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, in-progress, completed, blocked]
        order:
          type: integer

    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        launch_id:
          type: integer
          format: int64
        milestone_id:
          type: integer
          format: int64
          nullable: true
        title:
          type: string
        description:
          type: string
        assignee_id:
          type: integer
          format: int64
          nullable: true
        status:
          type: string
          enum: [todo, in-progress, done, blocked]
        priority:
          type: string
          enum: [low, medium, high]
        due_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTaskRequest:
      type: object
      required:
        - launch_id
        - title
      properties:
        launch_id:
          type: integer
          format: int64
        milestone_id:
          type: integer
          format: int64
          nullable: true
        title:
          type: string
        description:
          type: string
        assignee_id:
          type: integer
          format: int64
          nullable: true
        status:
          type: string
          enum: [todo, in-progress, done, blocked]
        priority:
          type: string
          enum: [low, medium, high]
        due_date:
          type: string
          format: date-time
          nullable: true

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        assignee_id:
          type: integer
          format: int64
          nullable: true
        status:
          type: string
          enum: [todo, in-progress, done, blocked]
        priority:
          type: string
          enum: [low, medium, high]
        due_date:
          type: string
          format: date-time
          nullable: true
        milestone_id:
          type: integer
          format: int64
          nullable: true

    SuccessMessage:
      type: object
      properties:
        message:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string
